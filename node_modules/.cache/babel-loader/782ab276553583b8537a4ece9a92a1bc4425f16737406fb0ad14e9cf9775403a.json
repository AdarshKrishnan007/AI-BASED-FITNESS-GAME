{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpComplexProgram } from '../binary_op_complex_webgpu';\nimport { BinaryOpType } from '../binary_op_util';\nimport { BinaryOpProgram } from '../binary_op_webgpu';\nimport { complex } from '../kernels/Complex';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(_ref) {\n  let {\n    opType,\n    cpuKernelImpl,\n    dtype\n  } = _ref;\n  return _ref2 => {\n    let {\n      inputs,\n      backend\n    } = _ref2;\n    const {\n      x\n    } = inputs;\n    const webgpuBackend = backend;\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n    const program = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(_ref3) {\n  let {\n    opType,\n    cpuKernelImpl,\n    supportsComplex = false,\n    dtype\n  } = _ref3;\n  return _ref4 => {\n    let {\n      inputs,\n      backend\n    } = _ref4;\n    const {\n      a,\n      b\n    } = inputs;\n    const webgpuBackend = backend;\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real, imag;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n        const inputs = [{\n          dataId: aData.complexTensorInfos.real.dataId,\n          dtype: aData.complexTensorInfos.real.dtype,\n          shape: a.shape\n        }, {\n          dataId: aData.complexTensorInfos.imag.dataId,\n          dtype: aData.complexTensorInfos.imag.dtype,\n          shape: a.shape\n        }, {\n          dataId: bData.complexTensorInfos.real.dataId,\n          dtype: bData.complexTensorInfos.real.dtype,\n          shape: b.shape\n        }, {\n          dataId: bData.complexTensorInfos.imag.dataId,\n          dtype: bData.complexTensorInfos.imag.dtype,\n          shape: b.shape\n        }];\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n      const complexOutput = complex({\n        inputs: {\n          real,\n          imag\n        },\n        backend: webgpuBackend\n      });\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n      // TODO: Implement CPU forwarding for complex inputs.\n      return complexOutput;\n    }\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' || webgpuBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aData) : aData;\n      const decodedBVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bData) : bData;\n      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}","map":{"version":3,"names":["backend_util","upcastType","BinaryOpComplexProgram","BinaryOpType","BinaryOpProgram","complex","UnaryOpProgram","unaryKernelFunc","_ref","opType","cpuKernelImpl","dtype","_ref2","inputs","backend","x","webgpuBackend","$dtype","shouldExecuteOnCPU","xData","tensorMap","get","dataId","outValues","values","makeTensorInfo","shape","program","runWebGPUProgram","binaryKernelFunc","_ref3","supportsComplex","_ref4","a","b","aData","bData","real","imag","MUL","complexTensorInfos","map","complexParts","aPart","bPart","aHandle","bHandle","realProgram","COMPLEX_MULTIPLY_REAL","imagProgram","COMPLEX_MULTIPLY_IMAG","complexOutput","disposeData","decodedAVals","fromUint8ToStringArray","decodedBVals","outShape"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\kernel_utils\\kernel_funcs_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TensorInfo, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpComplexProgram} from '../binary_op_complex_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\nimport {complex} from '../kernels/Complex';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\ntype UnaryKernelFuncConfig = {\n  opType: UnaryOpType,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opType, cpuKernelImpl, dtype}: UnaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const program: UnaryOpProgram = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opType: BinaryOpType,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  supportsComplex?: boolean,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    {opType, cpuKernelImpl, supportsComplex = false, dtype}:\n        BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real: TensorInfo, imag: TensorInfo;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [\n          [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n          [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n        ].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(\n              program, [aHandle, bHandle],\n              upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n\n        const inputs = [\n          {\n            dataId: aData.complexTensorInfos.real.dataId,\n            dtype: aData.complexTensorInfos.real.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: aData.complexTensorInfos.imag.dataId,\n            dtype: aData.complexTensorInfos.imag.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.real.dataId,\n            dtype: bData.complexTensorInfos.real.dtype,\n            shape: b.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.imag.dataId,\n            dtype: bData.complexTensorInfos.imag.dtype,\n            shape: b.shape\n          }\n        ];\n\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webgpuBackend});\n\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n\n      // TODO: Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webgpuBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values as TypedArray;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values as TypedArray;\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aData as any as Uint8Array[]) :\n          aData;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bData as any as Uint8Array[]) :\n          bData;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}