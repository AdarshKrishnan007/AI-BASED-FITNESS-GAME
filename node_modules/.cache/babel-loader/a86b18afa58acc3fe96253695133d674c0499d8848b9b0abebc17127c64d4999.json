{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class StridedSliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['x'];\n    // TODO(xing.xu): Increase the workPerThread.\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = \"begin : \".concat(dtype, \",  strides : \").concat(dtype, \", \");\n    this.shaderKey = 'stridedSlice';\n  }\n  getUserCode() {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = this.outputShape.map((_, i) => {\n        outputAxis++;\n        return this.outputShape.length === 1 ? \"coords * uniforms.strides[\".concat(i, \"] + uniforms.begin[\").concat(i, \"]\") : \"coords[\".concat(outputAxis - 1, \"] * uniforms.strides[\").concat(i, \"] + uniforms.begin[\").concat(i, \"]\");\n      }).join(',');\n    }\n    const userCode = \"\\n       \".concat(main('index'), \" {\\n         if (index < uniforms.size) {\\n           let coords = getCoordsFromIndex(index);\\n           setOutputAtIndex(index, getX(\").concat(newCoords, \"));\\n         }\\n       }\\n     \");\n    return userCode;\n  }\n}","map":{"version":3,"names":["getCoordsDataType","getMainHeaderString","main","computeDispatch","flatDispatchLayout","StridedSliceProgram","constructor","destSize","variableNames","workPerThread","workgroupSize","size","outputShape","dispatchLayout","dispatch","dtype","length","uniforms","concat","shaderKey","getUserCode","rank","newCoords","outputAxis","map","_","i","join","userCode"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\strided_slice_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class StridedSliceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  // TODO(xing.xu): Increase the workPerThread.\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = `begin : ${dtype},  strides : ${dtype}, `;\n    this.shaderKey = 'stridedSlice';\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          this.outputShape\n              .map((_, i) => {\n                outputAxis++;\n                return this.outputShape.length === 1 ?\n                    `coords * uniforms.strides[${i}] + uniforms.begin[${i}]` :\n                    `coords[${outputAxis - 1}] * uniforms.strides[${\n                        i}] + uniforms.begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${newCoords}));\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC9F,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,mBAAmB;EAY9BC,YAAYC,QAAkB;IAX9B,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAMrB;IACA,KAAAC,aAAa,GAAG,CAAC;IACjB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,IAAI,GAAG,IAAI;IAGT,IAAI,CAACC,WAAW,GAAGL,QAAQ;IAC3B,IAAI,CAACM,cAAc,GAAGT,kBAAkB,CAAC,IAAI,CAACQ,WAAW,CAAC;IAC1D,IAAI,CAACE,QAAQ,GAAGX,eAAe,CAC3B,IAAI,CAACU,cAAc,EAAE,IAAI,CAACD,WAAW,EAAE,IAAI,CAACF,aAAa,EACzD,CAAC,IAAI,CAACD,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE/B,MAAMM,KAAK,GAAGf,iBAAiB,CAAC,IAAI,CAACY,WAAW,CAACI,MAAM,CAAC;IACxD,IAAI,CAACC,QAAQ,cAAAC,MAAA,CAAcH,KAAK,mBAAAG,MAAA,CAAgBH,KAAK,OAAI;IACzD,IAAI,CAACI,SAAS,GAAG,cAAc;EACjC;EAEAC,WAAWA,CAAA;IACT,MAAMC,IAAI,GAAG,IAAI,CAACT,WAAW,CAACI,MAAM;IACpC,IAAIM,SAAS,GAAG,EAAE;IAClB,IAAID,IAAI,KAAK,CAAC,EAAE;MACdC,SAAS,GAAG,4CAA4C;KACzD,MAAM;MACL,IAAIC,UAAU,GAAG,CAAC;MAClBD,SAAS,GACL,IAAI,CAACV,WAAW,CACXY,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACZH,UAAU,EAAE;QACZ,OAAO,IAAI,CAACX,WAAW,CAACI,MAAM,KAAK,CAAC,gCAAAE,MAAA,CACHQ,CAAC,yBAAAR,MAAA,CAAsBQ,CAAC,mBAAAR,MAAA,CAC3CK,UAAU,GAAG,CAAC,2BAAAL,MAAA,CACpBQ,CAAC,yBAAAR,MAAA,CAAsBQ,CAAC,MAAG;MACrC,CAAC,CAAC,CACDC,IAAI,CAAC,GAAG,CAAC;;IAGpB,MAAMC,QAAQ,eAAAV,MAAA,CACThB,IAAI,CAAC,OAAO,CAAC,6IAAAgB,MAAA,CAGoBI,SAAS,qCAG7C;IACF,OAAOM,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}