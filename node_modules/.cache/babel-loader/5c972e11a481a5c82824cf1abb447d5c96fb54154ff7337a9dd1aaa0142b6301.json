{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { padCommon } from './pad_webgpu';\nimport { getSwitchedCoords } from './transpose_webgpu';\nimport { getCoordsDataType, getCoordsFromIndexSnippet, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SpaceToBatchNDProgram {\n  constructor(xShape, paddedXShape, paddings, reshapedPaddedXShape, newDim, paddedXShapeStridesShapeLength) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.uniforms = '';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    const outputShape = new Array(reshapedPaddedXShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = reshapedPaddedXShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.newDim = newDim;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    this.paddedXShape = paddedXShape;\n    this.uniforms += \"reshapedPaddedXShape : \".concat(getCoordsDataType(reshapedPaddedXShape.length), \", paddedXShapeStrides : \").concat(getCoordsDataType(paddedXShapeStridesShapeLength), \", \");\n    paddings.map((_, i) => {\n      this.uniforms += \" pad\".concat(i, \" : vec2<i32>,\");\n    });\n    this.shaderKey = \"spaceToBatchND_\".concat(newDim);\n  }\n  getUserCode() {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n    const userCode = \"\\n      \".concat(getCoordsFromIndexSnippet(this.paddedXShape, 'PaddedX'), \"\\n      \").concat(main('index'), \" {\\n        if(index < uniforms.size) {\\n          let coords = getCoordsFromIndex(index);\\n          let switchedIndex = getIndexFromCoords\").concat(this.outputShape.length, \"D(\").concat(dtype, \"(\").concat(switched, \"), uniforms.reshapedPaddedXShape);\\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\\n          \").concat(padCommon(this.xShape, true), \"\\n        }\\n      }\\n    \");\n    return userCode;\n  }\n}","map":{"version":3,"names":["padCommon","getSwitchedCoords","getCoordsDataType","getCoordsFromIndexSnippet","getMainHeaderString","main","computeDispatch","flatDispatchLayout","SpaceToBatchNDProgram","constructor","xShape","paddedXShape","paddings","reshapedPaddedXShape","newDim","paddedXShapeStridesShapeLength","variableNames","outputShape","uniforms","workgroupSize","size","Array","length","i","dispatchLayout","dispatch","concat","map","_","shaderKey","getUserCode","dtype","switched","userCode"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\space_to_batchND_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {padCommon} from './pad_webgpu';\nimport {getSwitchedCoords} from './transpose_webgpu';\nimport {getCoordsDataType, getCoordsFromIndexSnippet, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SpaceToBatchNDProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = '';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  xShape: number[];\n  paddedXShape: number[];\n  size = true;\n\n  constructor(\n      xShape: number[], paddedXShape: number[],\n      paddings: Array<[number, number]>, reshapedPaddedXShape: number[],\n      newDim: number[], paddedXShapeStridesShapeLength: number) {\n    const outputShape: number[] = new Array(reshapedPaddedXShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = reshapedPaddedXShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.newDim = newDim;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    this.paddedXShape = paddedXShape;\n    this.uniforms += `reshapedPaddedXShape : ${\n        getCoordsDataType(\n            reshapedPaddedXShape.length)}, paddedXShapeStrides : ${\n        getCoordsDataType(paddedXShapeStridesShapeLength)}, `;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.shaderKey = `spaceToBatchND_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${getCoordsFromIndexSnippet(this.paddedXShape, 'PaddedX')}\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${\n        dtype}(${switched}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${padCommon(this.xShape, true)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,SAAS,QAAO,cAAc;AACtC,SAAQC,iBAAiB,QAAO,oBAAoB;AACpD,SAAQC,iBAAiB,EAAEC,yBAAyB,EAAEC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AACzH,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,qBAAqB;EAahCC,YACIC,MAAgB,EAAEC,YAAsB,EACxCC,QAAiC,EAAEC,oBAA8B,EACjEC,MAAgB,EAAEC,8BAAsC;IAf5D,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,KAAAC,WAAW,GAAa,EAAE;IAI1B,KAAAC,QAAQ,GAAG,EAAE;IACb,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAIpD,KAAAC,IAAI,GAAG,IAAI;IAMT,MAAMH,WAAW,GAAa,IAAII,KAAK,CAACR,oBAAoB,CAACS,MAAM,CAAC;IACpE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,WAAW,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC3CN,WAAW,CAACM,CAAC,CAAC,GAAGV,oBAAoB,CAACC,MAAM,CAACS,CAAC,CAAC,CAAC;;IAElD,IAAI,CAACN,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACU,cAAc,GAAGjB,kBAAkB,CAAC,IAAI,CAACU,WAAW,CAAC;IAC1D,IAAI,CAACQ,QAAQ,GAAGnB,eAAe,CAC3B,IAAI,CAACkB,cAAc,EAAE,IAAI,CAACP,WAAW,EAAE,IAAI,CAACE,aAAa,CAAC;IAC9D,IAAI,CAACT,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACO,QAAQ,8BAAAQ,MAAA,CACTxB,iBAAiB,CACbW,oBAAoB,CAACS,MAAM,CAAC,8BAAAI,MAAA,CAChCxB,iBAAiB,CAACa,8BAA8B,CAAC,OAAI;IACzDH,QAAQ,CAACe,GAAG,CAAC,CAACC,CAAC,EAAEL,CAAC,KAAI;MACpB,IAAI,CAACL,QAAQ,WAAAQ,MAAA,CAAWH,CAAC,kBAAe;IAC1C,CAAC,CAAC;IACF,IAAI,CAACM,SAAS,qBAAAH,MAAA,CAAqBZ,MAAM,CAAE;EAC7C;EAEAgB,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAG7B,iBAAiB,CAAC,IAAI,CAACe,WAAW,CAACK,MAAM,CAAC;IACxD,MAAMU,QAAQ,GAAG/B,iBAAiB,CAAC,IAAI,CAACa,MAAM,CAAC;IAE/C,MAAMmB,QAAQ,cAAAP,MAAA,CACVvB,yBAAyB,CAAC,IAAI,CAACQ,YAAY,EAAE,SAAS,CAAC,cAAAe,MAAA,CACvDrB,IAAI,CAAC,OAAO,CAAC,kJAAAqB,MAAA,CAG6B,IAAI,CAACT,WAAW,CAACK,MAAM,QAAAI,MAAA,CACjEK,KAAK,OAAAL,MAAA,CAAIM,QAAQ,4HAAAN,MAAA,CAEb1B,SAAS,CAAC,IAAI,CAACU,MAAM,EAAE,IAAI,CAAC,+BAGnC;IACD,OAAOuB,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}