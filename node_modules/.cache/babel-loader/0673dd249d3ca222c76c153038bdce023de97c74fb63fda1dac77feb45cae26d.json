{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main, PixelsOpType } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class FromPixelsProgram {\n  constructor(outputShape, numChannels) {\n    let importVideo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.pixelsOpType = PixelsOpType.FROM_PIXELS;\n    this.outputShape = [0];\n    this.variableNames = [];\n    this.workgroupSize = [256, 1, 1]; // The empirical value.\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [numChannels, 1, 1]);\n    this.importVideo = importVideo;\n    this.shaderKey = \"fromPixels_\".concat(this.importVideo);\n  }\n  getUserCode() {\n    const textureLoad = this.importVideo ? 'textureLoad(src, vec2<i32>(coords.yx));' : 'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType = this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return \"\\n      @binding(1) @group(0) var src: \".concat(textureType, \";\\n      \").concat(main('index'), \" {\\n        let flatIndex = index * uniforms.numChannels;\\n        if (flatIndex < uniforms.size) {\\n          let coords = getCoordsFromIndex(flatIndex);\\n          let values = \").concat(textureLoad, \";\\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\\n          }\\n        }\\n      }\\n  \");\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","PixelsOpType","computeDispatch","flatDispatchLayout","FromPixelsProgram","constructor","outputShape","numChannels","importVideo","arguments","length","undefined","pixelsOpType","FROM_PIXELS","variableNames","workgroupSize","dispatchLayout","dispatch","shaderKey","concat","getUserCode","textureLoad","textureType"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\from_pixels_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, PixelsOpType, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FromPixelsProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  pixelsOpType = PixelsOpType.FROM_PIXELS;\n  outputShape: number[] = [0];\n  shaderKey: string;\n  importVideo: boolean;\n  variableNames: string[] = [];\n  workgroupSize: [number, number, number] =\n      [256, 1, 1];  // The empirical value.\n\n  constructor(outputShape: number[], numChannels: number, importVideo = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [numChannels, 1, 1]);\n\n    this.importVideo = importVideo;\n    this.shaderKey = `fromPixels_${this.importVideo}`;\n  }\n\n  getUserCode(): string {\n    const textureLoad = this.importVideo ?\n        'textureLoad(src, vec2<i32>(coords.yx));' :\n        'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType =\n        this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return `\n      @binding(1) @group(0) var src: ${textureType};\n      ${main('index')} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${textureLoad};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,mBAAmB,IAAIC,IAAI,EAAEC,YAAY,QAAsB,kBAAkB;AACzF,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,iBAAiB;EAW5BC,YAAYC,WAAqB,EAAEC,WAAmB,EAAqB;IAAA,IAAnBC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAR3E,KAAAG,YAAY,GAAGX,YAAY,CAACY,WAAW;IACvC,KAAAP,WAAW,GAAa,CAAC,CAAC,CAAC;IAG3B,KAAAQ,aAAa,GAAa,EAAE;IAC5B,KAAAC,aAAa,GACT,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE;IAGhB,IAAI,CAACT,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACU,cAAc,GAAGb,kBAAkB,CAAC,IAAI,CAACG,WAAW,CAAC;IAC1D,IAAI,CAACW,QAAQ,GAAGf,eAAe,CAC3B,IAAI,CAACc,cAAc,EAAE,IAAI,CAACV,WAAW,EAAE,IAAI,CAACS,aAAa,EACzD,CAACR,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAExB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACU,SAAS,iBAAAC,MAAA,CAAiB,IAAI,CAACX,WAAW,CAAE;EACnD;EAEAY,WAAWA,CAAA;IACT,MAAMC,WAAW,GAAG,IAAI,CAACb,WAAW,GAChC,yCAAyC,GACzC,2CAA2C;IAC/C,MAAMc,WAAW,GACb,IAAI,CAACd,WAAW,GAAG,kBAAkB,GAAG,iBAAiB;IAC7D,iDAAAW,MAAA,CACmCG,WAAW,eAAAH,MAAA,CAC1CnB,IAAI,CAAC,OAAO,CAAC,yLAAAmB,MAAA,CAIIE,WAAW;EAOlC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}