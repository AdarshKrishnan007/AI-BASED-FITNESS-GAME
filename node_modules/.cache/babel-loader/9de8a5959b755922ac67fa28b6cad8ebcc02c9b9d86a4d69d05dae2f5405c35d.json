{"ast":null,"code":"import apiFetch from \"./api\";\nfunction base64ToBlob(base64String) {\n  let byteString;\n  let mimeString = \"video/mp4\"; // Default fallback\n\n  // Handle full Base64 Data URL\n  if (base64String.includes(\"base64,\")) {\n    const parts = base64String.split(\",\");\n    byteString = atob(parts[1]);\n    mimeString = parts[0].match(/data:(.*);base64/)[1];\n  } else {\n    // Handle raw base64 (no prefix)\n    byteString = atob(base64String);\n  }\n  const ab = new ArrayBuffer(byteString.length);\n  const ia = new Uint8Array(ab);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  return new Blob([ab], {\n    type: mimeString\n  });\n}\nconst workoutService = {\n  startLiveDetection: exercise => {\n    const user_id = localStorage.getItem(\"email\");\n    if (!user_id) throw new Error(\"User not logged in or missing user_id\");\n    return apiFetch(\"/start\", {\n      method: \"POST\",\n      body: {\n        user_id,\n        type: exercise\n      }\n    });\n  },\n  uploadVideoDetection: (base64String, exercise) => {\n    const formData = new FormData();\n\n    // Convert base64 string to Blob\n    const blob = base64ToBlob(base64String);\n    const file = new File([blob], \"workout.mp4\", {\n      type: \"video/mp4\"\n    });\n    formData.append(\"video\", file);\n    formData.append(\"exercise\", exercise);\n    return apiFetch(\"/upload\", {\n      method: \"POST\",\n      body: formData,\n      isForm: true\n    });\n  },\n  logWorkout: data => apiFetch(\"/workout/log\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: data\n  }),\n  getTodayProgress: () => {\n    const user_id = localStorage.getItem(\"email\");\n    return apiFetch(\"/workout/progress\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        user_id\n      }\n    });\n  },\n  unlockNextLevel: ({\n    user_id,\n    currentLevel\n  }) => {\n    return apiFetch(\"/workout/unlock-level\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        user_id,\n        currentLevel\n      }\n    });\n  }\n};\nexport default workoutService;","map":{"version":3,"names":["apiFetch","base64ToBlob","base64String","byteString","mimeString","includes","parts","split","atob","match","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","workoutService","startLiveDetection","exercise","user_id","localStorage","getItem","Error","method","body","uploadVideoDetection","formData","FormData","blob","file","File","append","isForm","logWorkout","data","headers","getTodayProgress","unlockNextLevel","currentLevel"],"sources":["D:/Fitness WebApp/client/src/services/workoutService.js"],"sourcesContent":["import apiFetch from \"./api\";\r\n\r\nfunction base64ToBlob(base64String) {\r\n  let byteString;\r\n  let mimeString = \"video/mp4\"; // Default fallback\r\n\r\n  // Handle full Base64 Data URL\r\n  if (base64String.includes(\"base64,\")) {\r\n    const parts = base64String.split(\",\");\r\n    byteString = atob(parts[1]);\r\n    mimeString = parts[0].match(/data:(.*);base64/)[1];\r\n  } else {\r\n    // Handle raw base64 (no prefix)\r\n    byteString = atob(base64String);\r\n  }\r\n\r\n  const ab = new ArrayBuffer(byteString.length);\r\n  const ia = new Uint8Array(ab);\r\n\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n\r\n  return new Blob([ab], { type: mimeString });\r\n}\r\n\r\nconst workoutService = {\r\n  startLiveDetection: (exercise) => {\r\n    const user_id = localStorage.getItem(\"email\");\r\n    if (!user_id) throw new Error(\"User not logged in or missing user_id\");\r\n\r\n    return apiFetch(\"/start\", {\r\n      method: \"POST\",\r\n      body: {\r\n        user_id,\r\n        type: exercise,\r\n      },\r\n    });\r\n  },\r\n\r\n  uploadVideoDetection: (base64String, exercise) => {\r\n    const formData = new FormData();\r\n\r\n    // Convert base64 string to Blob\r\n    const blob = base64ToBlob(base64String);\r\n    const file = new File([blob], \"workout.mp4\", { type: \"video/mp4\" });\r\n\r\n    formData.append(\"video\", file);\r\n    formData.append(\"exercise\", exercise);\r\n\r\n    return apiFetch(\"/upload\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      isForm: true,\r\n    });\r\n  },\r\n\r\n  logWorkout: (data) =>\r\n    apiFetch(\"/workout/log\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: data,\r\n    }),\r\n\r\n  getTodayProgress: () => {\r\n    const user_id = localStorage.getItem(\"email\");\r\n    return apiFetch(\"/workout/progress\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: { user_id },\r\n    });\r\n  },\r\n  unlockNextLevel: ({ user_id, currentLevel }) => {\r\n    return apiFetch(\"/workout/unlock-level\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: { user_id, currentLevel },\r\n    });\r\n  },\r\n};\r\n\r\nexport default workoutService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}