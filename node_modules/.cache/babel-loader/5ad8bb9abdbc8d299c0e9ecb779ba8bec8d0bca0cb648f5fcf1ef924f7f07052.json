{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class AddNPackedProgram {\n  constructor(shapes) {\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => \"T\".concat(i));\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n  getUserCode() {\n    const snippets = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(\"let v\".concat(variable, \" = get\").concat(variable, \"ByOutputCoords(coords);\"));\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames.map(variable => {\n      return \"v\".concat(variable);\n    }).join(' + ');\n    const userCode = \"\\n      \".concat(main('index'), \" {\\n        for (var i = 0; i < \").concat(this.workPerThread, \"; i = i + 1) {\\n          let flatIndex = index * \").concat(this.workPerThread, \" + i;\\n          if (flatIndex < uniforms.size) {\\n            let coords = getCoordsFromIndex(flatIndex);\\n            \").concat(snippets.join('\\n        '), \"\\n            setOutputAtIndex(flatIndex, \").concat(operation, \");\\n          }\\n        }\\n      }\\n    \");\n    return userCode;\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","computeDispatch","flatDispatchLayout","AddNPackedProgram","constructor","shapes","workPerThread","workgroupSize","size","outputShape","variableNames","map","_","i","concat","dispatchLayout","dispatch","shaderKey","getUserCode","snippets","forEach","variable","push","operation","join","userCode"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\addn_packed_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AddNPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shapes: number[][]) {\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`let v${variable} = get${variable}ByOutputCoords(coords);`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    const userCode = `\n      ${main('index')} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${snippets.join('\\n        ')}\n            setOutputAtIndex(flatIndex, ${operation});\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,iBAAiB;EAU5BC,YAAYC,MAAkB;IAJ9B,KAAAC,aAAa,GAAG,CAAC;IACjB,KAAAC,aAAa,GAA6B,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,KAAAC,IAAI,GAAG,IAAI;IAGT,IAAI,CAACC,WAAW,GAAGJ,MAAM,CAAC,CAAC,CAAC;IAC5B,IAAI,CAACK,aAAa,GAAGL,MAAM,CAACM,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,SAAAC,MAAA,CAASD,CAAC,CAAE,CAAC;IAClD,IAAI,CAACE,cAAc,GAAGb,kBAAkB,CAAC,IAAI,CAACO,WAAW,CAAC;IAC1D,IAAI,CAACO,QAAQ,GAAGf,eAAe,CAC3B,IAAI,CAACc,cAAc,EAAE,IAAI,CAACN,WAAW,EAAE,IAAI,CAACF,aAAa,EACzD,CAAC,IAAI,CAACD,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,IAAI,CAACW,SAAS,GAAG,MAAM;EACzB;EAEAC,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAa,EAAE;IAC7B;IACA,IAAI,CAACT,aAAa,CAACU,OAAO,CAACC,QAAQ,IAAG;MACpCF,QAAQ,CAACG,IAAI,SAAAR,MAAA,CAASO,QAAQ,YAAAP,MAAA,CAASO,QAAQ,4BAAyB,CAAC;IAC3E,CAAC,CAAC;IACF;IACA,MAAME,SAAS,GAAG,IAAI,CAACb,aAAa,CACbC,GAAG,CAACU,QAAQ,IAAG;MACd,WAAAP,MAAA,CAAWO,QAAQ;IACrB,CAAC,CAAC,CACDG,IAAI,CAAC,KAAK,CAAC;IAElC,MAAMC,QAAQ,cAAAX,MAAA,CACVd,IAAI,CAAC,OAAO,CAAC,sCAAAc,MAAA,CACS,IAAI,CAACR,aAAa,wDAAAQ,MAAA,CACZ,IAAI,CAACR,aAAa,8HAAAQ,MAAA,CAGxCK,QAAQ,CAACK,IAAI,CAAC,YAAY,CAAC,gDAAAV,MAAA,CACCS,SAAS,8CAI9C;IACD,OAAOE,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}