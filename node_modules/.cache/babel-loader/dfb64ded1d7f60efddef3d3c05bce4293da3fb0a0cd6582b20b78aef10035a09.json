{"ast":null,"code":"import apiFetch from \"./api\";\nfunction base64ToBlob(base64) {\n  const byteString = atob(base64.split(\",\")[1]); // remove `data:video/mp4;base64,`\n  const mimeString = base64.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n  const ab = new ArrayBuffer(byteString.length);\n  const ia = new Uint8Array(ab);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  return new Blob([ab], {\n    type: mimeString\n  });\n}\nconst workoutService = {\n  startLiveDetection: exercise => {\n    const user_id = localStorage.getItem(\"email\");\n    if (!user_id) throw new Error(\"User not logged in or missing user_id\");\n    return apiFetch(\"/start\", {\n      method: \"POST\",\n      body: {\n        user_id,\n        type: exercise\n      }\n    });\n  },\n  uploadVideoDetection: (base64String, exercise) => {\n    const formData = new FormData();\n\n    // Convert base64 string to Blob\n    const blob = base64ToBlob(base64String);\n    const file = new File([blob], \"workout.mp4\", {\n      type: \"video/mp4\"\n    });\n    formData.append(\"video\", file);\n    formData.append(\"exercise\", exercise);\n    return apiFetch(\"/upload\", {\n      method: \"POST\",\n      body: formData,\n      isForm: true\n    });\n  },\n  logWorkout: data => apiFetch(\"/workout/log\", {\n    method: \"POST\",\n    body: data\n  }),\n  getTodayProgress: () => {\n    const user_id = localStorage.getItem(\"email\");\n    return apiFetch(\"/workout/progress\", {\n      method: \"POST\",\n      body: {\n        user_id\n      }\n    });\n  }\n};\nexport default workoutService;","map":{"version":3,"names":["apiFetch","base64ToBlob","base64","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","workoutService","startLiveDetection","exercise","user_id","localStorage","getItem","Error","method","body","uploadVideoDetection","base64String","formData","FormData","blob","file","File","append","isForm","logWorkout","data","getTodayProgress"],"sources":["D:/Fitness WebApp/client/src/services/workoutService.js"],"sourcesContent":["import apiFetch from \"./api\";\r\n\r\nfunction base64ToBlob(base64) {\r\n  const byteString = atob(base64.split(\",\")[1]); // remove `data:video/mp4;base64,`\r\n  const mimeString = base64.split(\",\")[0].split(\":\")[1].split(\";\")[0];\r\n  const ab = new ArrayBuffer(byteString.length);\r\n  const ia = new Uint8Array(ab);\r\n\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n\r\n  return new Blob([ab], { type: mimeString });\r\n}\r\n\r\nconst workoutService = {\r\n  startLiveDetection: (exercise) => {\r\n    const user_id = localStorage.getItem(\"email\");\r\n    if (!user_id) throw new Error(\"User not logged in or missing user_id\");\r\n\r\n    return apiFetch(\"/start\", {\r\n      method: \"POST\",\r\n      body: {\r\n        user_id,\r\n        type: exercise,\r\n      },\r\n    });\r\n  },\r\n\r\n  uploadVideoDetection: (base64String, exercise) => {\r\n    const formData = new FormData();\r\n\r\n    // Convert base64 string to Blob\r\n    const blob = base64ToBlob(base64String);\r\n    const file = new File([blob], \"workout.mp4\", { type: \"video/mp4\" });\r\n\r\n    formData.append(\"video\", file);\r\n    formData.append(\"exercise\", exercise);\r\n\r\n    return apiFetch(\"/upload\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n      isForm: true,\r\n    });\r\n  },\r\n\r\n  logWorkout: (data) =>\r\n    apiFetch(\"/workout/log\", {\r\n      method: \"POST\",\r\n      body: data,\r\n    }),\r\n\r\n  getTodayProgress: () => {\r\n    const user_id = localStorage.getItem(\"email\");\r\n    return apiFetch(\"/workout/progress\", {\r\n      method: \"POST\",\r\n      body: { user_id },\r\n    });\r\n  },\r\n};\r\n\r\nexport default workoutService;\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,OAAO;AAE5B,SAASC,YAAYA,CAACC,MAAM,EAAE;EAC5B,MAAMC,UAAU,GAAGC,IAAI,CAACF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAMC,UAAU,GAAGJ,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnE,MAAME,EAAE,GAAG,IAAIC,WAAW,CAACL,UAAU,CAACM,MAAM,CAAC;EAC7C,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAACJ,EAAE,CAAC;EAE7B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,UAAU,CAACM,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC1CF,EAAE,CAACE,CAAC,CAAC,GAAGT,UAAU,CAACU,UAAU,CAACD,CAAC,CAAC;EAClC;EAEA,OAAO,IAAIE,IAAI,CAAC,CAACP,EAAE,CAAC,EAAE;IAAEQ,IAAI,EAAET;EAAW,CAAC,CAAC;AAC7C;AAEA,MAAMU,cAAc,GAAG;EACrBC,kBAAkB,EAAGC,QAAQ,IAAK;IAChC,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7C,IAAI,CAACF,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;IAEtE,OAAOtB,QAAQ,CAAC,QAAQ,EAAE;MACxBuB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QACJL,OAAO;QACPJ,IAAI,EAAEG;MACR;IACF,CAAC,CAAC;EACJ,CAAC;EAEDO,oBAAoB,EAAEA,CAACC,YAAY,EAAER,QAAQ,KAAK;IAChD,MAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE/B;IACA,MAAMC,IAAI,GAAG5B,YAAY,CAACyB,YAAY,CAAC;IACvC,MAAMI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,IAAI,CAAC,EAAE,aAAa,EAAE;MAAEd,IAAI,EAAE;IAAY,CAAC,CAAC;IAEnEY,QAAQ,CAACK,MAAM,CAAC,OAAO,EAAEF,IAAI,CAAC;IAC9BH,QAAQ,CAACK,MAAM,CAAC,UAAU,EAAEd,QAAQ,CAAC;IAErC,OAAOlB,QAAQ,CAAC,SAAS,EAAE;MACzBuB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEG,QAAQ;MACdM,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAEDC,UAAU,EAAGC,IAAI,IACfnC,QAAQ,CAAC,cAAc,EAAE;IACvBuB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEW;EACR,CAAC,CAAC;EAEJC,gBAAgB,EAAEA,CAAA,KAAM;IACtB,MAAMjB,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC7C,OAAOrB,QAAQ,CAAC,mBAAmB,EAAE;MACnCuB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE;QAAEL;MAAQ;IAClB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAeH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}