{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { backend } from '../globals';\nimport { env } from '../environment';\nimport { getBackend } from '../globals';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n  // TODO(adarob, cais): Support quantization.\n  const specs = [];\n  const dataPromises = [];\n  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(\"Unsupported dtype in weight '\".concat(name, \"': \").concat(t.dtype));\n    }\n    const spec = {\n      name,\n      shape: t.shape,\n      dtype: t.dtype\n    };\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise(async resolve => {\n        const vals = await t.bytes();\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n  const tensorValues = await Promise.all(dataPromises);\n  return {\n    data: concatenateTypedArrays(tensorValues),\n    specs\n  };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param weightData A flat ArrayBuffer or an array of ArrayBuffers carrying the\n *   binary values of the tensors concatenated in the order specified in\n *   `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(weightData, specs) {\n  // TODO(adarob, cais): Support quantization.\n  const compositeBuffer = new CompositeArrayBuffer(weightData);\n  const out = {};\n  let offset = 0;\n  for (const spec of specs) {\n    const byteLength = getWeightBytelength(spec, (start, end) => {\n      return compositeBuffer.slice(offset + start, offset + end);\n    });\n    out[spec.name] = decodeWeight(spec, compositeBuffer.slice(offset, offset + byteLength));\n    offset += byteLength;\n  }\n  return out;\n}\nfunction getWeightBytelength(spec, slice) {\n  const size = sizeFromShape(spec.shape);\n  let bytesPerValue;\n  if ('quantization' in spec) {\n    const quantization = spec.quantization;\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n  } else if (spec.dtype === 'string') {\n    // Can not statically determine string length.\n    let byteLength = 0;\n    for (let i = 0; i < size; i++) {\n      byteLength += NUM_BYTES_STRING_LENGTH + new Uint32Array(slice(byteLength, byteLength + NUM_BYTES_STRING_LENGTH))[0];\n    }\n    return byteLength;\n  } else {\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[spec.dtype];\n  }\n  return size * bytesPerValue;\n}\nasync function getWeightBytelengthAsync(spec, slice) {\n  const size = sizeFromShape(spec.shape);\n  let bytesPerValue;\n  if ('quantization' in spec) {\n    const quantization = spec.quantization;\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n  } else if (spec.dtype === 'string') {\n    // Can not statically determine string length.\n    let byteLength = 0;\n    for (let i = 0; i < size; i++) {\n      byteLength += NUM_BYTES_STRING_LENGTH + new Uint32Array(await slice(byteLength, byteLength + NUM_BYTES_STRING_LENGTH))[0];\n    }\n    return byteLength;\n  } else {\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[spec.dtype];\n  }\n  return size * bytesPerValue;\n}\nfunction decodeWeight(spec, byteBuffer) {\n  const name = spec.name;\n  const dtype = spec.dtype;\n  const shape = spec.shape;\n  const size = sizeFromShape(shape);\n  let values;\n  let offset = 0;\n  if ('quantization' in spec) {\n    const quantization = spec.quantization;\n    if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n      if (!('min' in quantization && 'scale' in quantization)) {\n        throw new Error(\"Weight \".concat(spec.name, \" with quantization \").concat(quantization.dtype, \" \") + \"doesn't have corresponding metadata min and scale.\");\n      }\n    } else if (quantization.dtype === 'float16') {\n      if (dtype !== 'float32') {\n        throw new Error(\"Weight \".concat(spec.name, \" is quantized with \").concat(quantization.dtype, \" \") + \"which only supports weights of type float32 not \".concat(dtype, \".\"));\n      }\n    } else {\n      throw new Error(\"Weight \".concat(spec.name, \" has unknown \") + \"quantization dtype \".concat(quantization.dtype, \". \") + \"Supported quantization dtypes are: \" + \"'uint8', 'uint16', and 'float16'.\");\n    }\n    const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n    const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n    if (dtype === 'float32') {\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        values = new Float32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = v * quantization.scale + quantization.min;\n        }\n      } else if (quantization.dtype === 'float16') {\n        // TODO: This is inefficient. Make getFloat16Decoder efficient.\n        const float16Decode = getFloat16Decoder();\n        values = float16Decode(quantizedArray);\n      } else {\n        throw new Error(\"Unsupported quantization type \".concat(quantization.dtype, \" \") + \"for weight type float32.\");\n      }\n    } else if (dtype === 'int32') {\n      if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n        throw new Error(\"Unsupported quantization type \".concat(quantization.dtype, \" \") + \"for weight type int32.\");\n      }\n      values = new Int32Array(quantizedArray.length);\n      for (let i = 0; i < quantizedArray.length; i++) {\n        const v = quantizedArray[i];\n        values[i] = Math.round(v * quantization.scale + quantization.min);\n      }\n    } else {\n      throw new Error(\"Unsupported dtype in weight '\".concat(name, \"': \").concat(dtype));\n    }\n    offset += size * quantizationSizeFactor;\n  } else if (dtype === 'string') {\n    const size = sizeFromShape(spec.shape);\n    values = [];\n    for (let i = 0; i < size; i++) {\n      const byteLength = new Uint32Array(byteBuffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n      offset += NUM_BYTES_STRING_LENGTH;\n      const bytes = new Uint8Array(byteBuffer.slice(offset, offset + byteLength));\n      values.push(bytes);\n      offset += byteLength;\n    }\n  } else {\n    const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n    if (dtype === 'float32') {\n      values = new Float32Array(byteBuffer);\n    } else if (dtype === 'int32') {\n      values = new Int32Array(byteBuffer);\n    } else if (dtype === 'bool') {\n      values = new Uint8Array(byteBuffer);\n    } else if (dtype === 'complex64') {\n      values = new Float32Array(byteBuffer);\n      const real = new Float32Array(values.length / 2);\n      const image = new Float32Array(values.length / 2);\n      for (let i = 0; i < real.length; i++) {\n        real[i] = values[i * 2];\n        image[i] = values[i * 2 + 1];\n      }\n      const realTensor = tensor(real, shape, 'float32');\n      const imageTensor = tensor(image, shape, 'float32');\n      const complexTensor = complex(realTensor, imageTensor);\n      realTensor.dispose();\n      imageTensor.dispose();\n      return complexTensor;\n    } else {\n      throw new Error(\"Unsupported dtype in weight '\".concat(name, \"': \").concat(dtype));\n    }\n    offset += size * dtypeFactor;\n  }\n  return tensor(values, shape, dtype);\n}\nasync function readToLength(reader, initialData, length) {\n  let data = new Uint8Array(initialData);\n  while (data.byteLength < length) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (done && value == null) {\n      const missing = length - data.byteLength;\n      throw new Error(\"Reader is done but \".concat(missing, \" bytes are still expected\"));\n    }\n    // TODO: Don't create a new array every loop.\n    const newData = new Uint8Array(data.length + value.byteLength);\n    newData.set(data, 0);\n    newData.set(new Uint8Array(value), data.length);\n    data = newData;\n  }\n  return data.buffer;\n}\nexport async function decodeWeightsStream(weightStream, specs) {\n  const tensors = {};\n  const reader = weightStream.getReader();\n  let data = new ArrayBuffer(0);\n  for (const spec of specs) {\n    const byteLength = await getWeightBytelengthAsync(spec, async (start, end) => {\n      data = await readToLength(reader, data, end);\n      return data.slice(start, end);\n    });\n    data = await readToLength(reader, data, byteLength);\n    // Slice the tensor out\n    const tensorData = data.slice(0, byteLength);\n    data = data.slice(byteLength);\n    const weightTensor = decodeWeight(spec, tensorData);\n    tensors[spec.name] = weightTensor;\n    // TODO(mattsoulanille): Better way to call uploadToGPU.\n    // TODO(mattsoulanille): Make this work for webgl too.\n    if (getBackend() === 'webgpu') {\n      const b = backend();\n      if ('uploadToGPU' in b && sizeFromShape(weightTensor.shape) >= env().get('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD')) {\n        b.uploadToGPU(weightTensor.dataId);\n      }\n    }\n  }\n  return tensors;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(\"Invalid input value: \".concat(JSON.stringify(xs)));\n  }\n  let totalByteLength = 0;\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs = [];\n  xs.forEach(x => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(\"Unsupported TypedArray subtype: \".concat(x.constructor.name));\n    }\n    // tslint:enable:no-any\n  });\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach(x => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str, 'utf8');\n  }\n  return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers An array of ArrayBuffers to concatenate, or a single\n *     ArrayBuffer.\n * @returns Result of concatenating `buffers` in order.\n *\n * @deprecated Use tf.io.CompositeArrayBuffer.join() instead.\n */\nexport function concatenateArrayBuffers(buffers) {\n  return CompositeArrayBuffer.join(buffers);\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n  const result = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.initializerSignature != null) {\n    result.initializerSignature = artifacts.initializerSignature;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer or array of ArrayBuffers of weight data for\n *     the model corresponding to the weights in weightSpecs. Must be passed if\n *     the modelJSON has a weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData) {\n  const modelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    if (!weightSpecs) {\n      throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n    }\n    if (!weightData) {\n      throw new Error('modelJSON has weightsManifest but weightData is null');\n    }\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  if (modelJSON.initializerSignature != null) {\n    modelArtifacts.initializerSignature = modelJSON.initializerSignature;\n  }\n  return modelArtifacts;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n  let weightSpecs;\n  let weightData;\n  if (modelJSON.weightsManifest != null) {\n    [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n  }\n  return getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData);\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : new CompositeArrayBuffer(modelArtifacts.weightData).byteLength\n  };\n}\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest) {\n  const weightSpecs = [];\n  for (const entry of weightsManifest) {\n    weightSpecs.push(...entry.weights);\n  }\n  return weightSpecs;\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = i => {\n    let m = i << 13;\n    let e = 0;\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n  return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n  return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return quantizedArray => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"names":["complex","tensor","sizeFromShape","DTYPE_VALUE_SIZE_MAP","CompositeArrayBuffer","backend","env","getBackend","NUM_BYTES_STRING_LENGTH","encodeWeights","tensors","group","specs","dataPromises","names","Array","isArray","map","name","Object","keys","i","length","t","dtype","Error","concat","spec","shape","utf8bytes","Promise","resolve","vals","bytes","totalNumBytes","reduce","p","c","Uint8Array","offset","val","bytesOfLength","Uint32Array","buffer","set","push","data","tensorValues","all","concatenateTypedArrays","decodeWeights","weightData","compositeBuffer","out","byteLength","getWeightBytelength","start","end","slice","decodeWeight","size","bytesPerValue","quantization","getWeightBytelengthAsync","byteBuffer","values","quantizationSizeFactor","quantizedArray","Uint16Array","Float32Array","v","scale","min","float16Decode","getFloat16Decoder","Int32Array","Math","round","dtypeFactor","real","image","realTensor","imageTensor","complexTensor","dispose","readToLength","reader","initialData","done","value","read","missing","newData","decodeWeightsStream","weightStream","getReader","ArrayBuffer","tensorData","weightTensor","b","get","uploadToGPU","dataId","xs","JSON","stringify","totalByteLength","normalizedXs","forEach","x","constructor","y","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","arrayBufferToBase64String","from","toString","buf","s","l","String","fromCharCode","base64StringToArrayBuffer","byteOffset","charCodeAt","concatenateArrayBuffers","buffers","join","basename","path","SEPARATOR","trim","endsWith","items","split","getModelJSONForModelArtifacts","artifacts","manifest","result","modelTopology","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","initializerSignature","trainingConfig","getModelArtifactsForJSONSync","modelJSON","weightSpecs","modelArtifacts","getModelArtifactsForJSON","loadWeights","getModelArtifactsInfoForJSON","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","getWeightSpecs","entry","weights","computeFloat16MantisaTable","convertMantissa","m","e","mantisaTable","computeFloat16ExponentTable","exponentTable","computeFloat16OffsetTable","offsetTable","bufferUint32View","index","float16Bits","float32Bits"],"sources":["D:\\Fitness WebApp\\tfjs-core\\src\\io\\io_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightData, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\nimport {Tensor} from '../tensor';\nimport {backend} from '../globals';\nimport {DataId} from '../tensor_info';\nimport {env} from '../environment';\nimport {getBackend} from '../globals';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param weightData A flat ArrayBuffer or an array of ArrayBuffers carrying the\n *   binary values of the tensors concatenated in the order specified in\n *   `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    weightData: WeightData,\n    specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const compositeBuffer = new CompositeArrayBuffer(weightData);\n  const out: NamedTensorMap = {};\n  let offset = 0;\n  for (const spec of specs) {\n    const byteLength = getWeightBytelength(spec, (start, end) => {\n      return compositeBuffer.slice(offset + start, offset + end);\n    });\n    out[spec.name] = decodeWeight(spec, compositeBuffer\n      .slice(offset, offset + byteLength));\n    offset += byteLength;\n  }\n  return out;\n}\n\nfunction getWeightBytelength(spec: WeightsManifestEntry,\n  slice: (start: number, end: number) => ArrayBuffer): number {\n\n  const size = sizeFromShape(spec.shape);\n  let bytesPerValue: number;\n  if ('quantization' in spec) {\n    const quantization = spec.quantization;\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n  } else if (spec.dtype === 'string') {\n    // Can not statically determine string length.\n    let byteLength = 0;\n    for (let i = 0; i < size; i++) {\n      byteLength += NUM_BYTES_STRING_LENGTH + new Uint32Array(\n        slice(byteLength, byteLength + NUM_BYTES_STRING_LENGTH))[0];\n    }\n    return byteLength;\n  } else {\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[spec.dtype];\n  }\n\n  return size * bytesPerValue;\n}\n\nasync function getWeightBytelengthAsync(\n  spec: WeightsManifestEntry,\n  slice: (start: number, end: number) => Promise<ArrayBuffer>\n): Promise<number> {\n\n  const size = sizeFromShape(spec.shape);\n  let bytesPerValue: number;\n  if ('quantization' in spec) {\n    const quantization = spec.quantization;\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n  } else if (spec.dtype === 'string') {\n    // Can not statically determine string length.\n    let byteLength = 0;\n    for (let i = 0; i < size; i++) {\n      byteLength += NUM_BYTES_STRING_LENGTH + new Uint32Array(\n        await slice(byteLength, byteLength + NUM_BYTES_STRING_LENGTH))[0];\n    }\n    return byteLength;\n  } else {\n    bytesPerValue = DTYPE_VALUE_SIZE_MAP[spec.dtype];\n  }\n\n  return size * bytesPerValue;\n}\n\nfunction decodeWeight(\n  spec: WeightsManifestEntry,\n  byteBuffer: ArrayBuffer): Tensor {\n\n  const name = spec.name;\n  const dtype = spec.dtype;\n  const shape = spec.shape;\n  const size = sizeFromShape(shape);\n  let values: TypedArray | string[] | Uint8Array[];\n  let offset = 0;\n\n  if ('quantization' in spec) {\n    const quantization = spec.quantization;\n    if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n      if (!('min' in quantization && 'scale' in quantization)) {\n        throw new Error(\n            `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n            `doesn't have corresponding metadata min and scale.`);\n      }\n    } else if (quantization.dtype === 'float16') {\n      if (dtype !== 'float32') {\n        throw new Error(\n            `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n            `which only supports weights of type float32 not ${dtype}.`);\n      }\n    } else {\n      throw new Error(\n          `Weight ${spec.name} has unknown ` +\n          `quantization dtype ${quantization.dtype}. ` +\n          `Supported quantization dtypes are: ` +\n          `'uint8', 'uint16', and 'float16'.`);\n    }\n    const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n    const quantizedArray = (quantization.dtype === 'uint8') ?\n      new Uint8Array(byteBuffer) :\n      new Uint16Array(byteBuffer);\n    if (dtype === 'float32') {\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        values = new Float32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = v * quantization.scale + quantization.min;\n        }\n      } else if (quantization.dtype === 'float16') {\n        // TODO: This is inefficient. Make getFloat16Decoder efficient.\n        const float16Decode = getFloat16Decoder();\n        values = float16Decode(quantizedArray as Uint16Array);\n      } else {\n        throw new Error(\n          `Unsupported quantization type ${quantization.dtype} ` +\n          `for weight type float32.`);\n      }\n    } else if (dtype === 'int32') {\n      if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n        throw new Error(\n          `Unsupported quantization type ${quantization.dtype} ` +\n          `for weight type int32.`);\n      }\n      values = new Int32Array(quantizedArray.length);\n      for (let i = 0; i < quantizedArray.length; i++) {\n        const v = quantizedArray[i];\n        values[i] = Math.round(v * quantization.scale + quantization.min);\n      }\n    } else {\n      throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n    }\n    offset += size * quantizationSizeFactor;\n  } else if (dtype === 'string') {\n    const size = sizeFromShape(spec.shape);\n    values = [];\n    for (let i = 0; i < size; i++) {\n      const byteLength = new Uint32Array(\n        byteBuffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n      offset += NUM_BYTES_STRING_LENGTH;\n      const bytes = new Uint8Array(\n        byteBuffer.slice(offset, offset + byteLength));\n      (values as Uint8Array[]).push(bytes);\n      offset += byteLength;\n    }\n  } else {\n    const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n    if (dtype === 'float32') {\n      values = new Float32Array(byteBuffer);\n    } else if (dtype === 'int32') {\n      values = new Int32Array(byteBuffer);\n    } else if (dtype === 'bool') {\n      values = new Uint8Array(byteBuffer);\n    } else if (dtype === 'complex64') {\n      values = new Float32Array(byteBuffer);\n      const real = new Float32Array(values.length / 2);\n      const image = new Float32Array(values.length / 2);\n      for (let i = 0; i < real.length; i++) {\n        real[i] = values[i * 2];\n        image[i] = values[i * 2 + 1];\n      }\n      const realTensor = tensor(real, shape, 'float32');\n      const imageTensor = tensor(image, shape, 'float32');\n      const complexTensor = complex(realTensor, imageTensor);\n      realTensor.dispose();\n      imageTensor.dispose();\n      return complexTensor;\n    } else {\n      throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n    }\n    offset += size * dtypeFactor;\n  }\n  return tensor(values, shape, dtype);\n}\n\nasync function readToLength(reader: ReadableStreamDefaultReader<ArrayBuffer>,\n                            initialData: ArrayBuffer,\n                            length: number): Promise<ArrayBuffer> {\n  let data = new Uint8Array(initialData);\n\n  while (data.byteLength < length) {\n    const {done, value} = await reader.read();\n    if (done && value == null) {\n      const missing  = length - data.byteLength;\n      throw new Error(`Reader is done but ${missing} bytes are still expected`);\n    }\n\n    // TODO: Don't create a new array every loop.\n    const newData = new Uint8Array(data.length + value.byteLength);\n    newData.set(data, 0);\n    newData.set(new Uint8Array(value), data.length);\n    data = newData;\n  }\n\n  return data.buffer;\n}\n\nexport async function decodeWeightsStream(\n  weightStream: ReadableStream<ArrayBuffer>,\n  specs: WeightsManifestEntry[]): Promise<NamedTensorMap> {\n\n  const tensors: NamedTensorMap = {};\n  const reader = weightStream.getReader();\n  let data = new ArrayBuffer(0);\n\n  for (const spec of specs) {\n    const byteLength = await getWeightBytelengthAsync(spec,\n                                                      async (start, end) => {\n      data = await readToLength(reader, data, end);\n      return data.slice(start, end);\n    });\n    data = await readToLength(reader, data, byteLength);\n\n    // Slice the tensor out\n    const tensorData = data.slice(0, byteLength);\n    data = data.slice(byteLength);\n\n    const weightTensor = decodeWeight(spec, tensorData);\n    tensors[spec.name] = weightTensor;\n\n    // TODO(mattsoulanille): Better way to call uploadToGPU.\n    // TODO(mattsoulanille): Make this work for webgl too.\n    if (getBackend() === 'webgpu') {\n      const b = backend();\n\n      if ('uploadToGPU' in b &&\n        sizeFromShape(weightTensor.shape) >= (env()\n          .get('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD') as number)) {\n        (b.uploadToGPU as (dataId: DataId) => void)(weightTensor.dataId);\n      }\n    }\n  }\n\n  return tensors;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str, 'utf8');\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers An array of ArrayBuffers to concatenate, or a single\n *     ArrayBuffer.\n * @returns Result of concatenating `buffers` in order.\n *\n * @deprecated Use tf.io.CompositeArrayBuffer.join() instead.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]\n      | ArrayBuffer): ArrayBuffer {\n  return CompositeArrayBuffer.join(buffers);\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.initializerSignature != null) {\n    result.initializerSignature = artifacts.initializerSignature;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer or array of ArrayBuffers of weight data for\n *     the model corresponding to the weights in weightSpecs. Must be passed if\n *     the modelJSON has a weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(\n    modelJSON: ModelJSON, weightSpecs?: WeightsManifestEntry[],\n    weightData?: WeightData): ModelArtifacts {\n\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    if (!weightSpecs) {\n      throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n    }\n    if (!weightData) {\n      throw new Error('modelJSON has weightsManifest but weightData is null');\n    }\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  if (modelJSON.initializerSignature != null) {\n    modelArtifacts.initializerSignature = modelJSON.initializerSignature;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], WeightData,\n    ]>): Promise<ModelArtifacts> {\n  let weightSpecs: WeightsManifestEntry[] | undefined;\n  let weightData: WeightData | undefined;\n\n  if (modelJSON.weightsManifest != null) {\n    [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n  }\n\n  return getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData);\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        new CompositeArrayBuffer(modelArtifacts.weightData).byteLength,\n  };\n}\n\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest: WeightsManifestConfig):\n    WeightsManifestEntry[] {\n  const weightSpecs: WeightsManifestEntry[] = [];\n  for (const entry of weightsManifest) {\n    weightSpecs.push(...entry.weights);\n  }\n  return weightSpecs;\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}