{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport var CumOpType;\n(function (CumOpType) {\n  CumOpType[\"Prod\"] = \"*\";\n  CumOpType[\"Sum\"] = \"+\";\n})(CumOpType || (CumOpType = {}));\nexport class CumProgram {\n  constructor(op, shape, exclusive, reverse) {\n    this.variableNames = ['x'];\n    // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n    this.uniforms = 'index : f32,';\n    this.size = true;\n    this.workgroupSize = [128, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = \"cum_\".concat(this.op, \"_\").concat(this.exclusive, \"_\").concat(this.reverse);\n  }\n  getUserCode() {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal : \"getX(\".concat(getCoords(rank, 'coords', this.op), \")\");\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? \"end != \".concat(length - 1) : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? \"end + pow2 < \".concat(length) : 'end >= pow2';\n      idxString = this.reverse ? 'end + pow2' : 'end - pow2';\n    }\n    return \"\\n      \".concat(main('index'), \" {\\n       if (index < uniforms.size) {\\n         var coords = getCoordsFromIndex(index);\\n\\n         let end = \").concat(getFinalCoord(rank, 'coords', this.op), \";\\n         var val = \").concat(val, \";\\n         let pow2 = i32(pow(2.0, uniforms.index));\\n         if (\").concat(condition, \") {\\n           let idx = \").concat(idxString, \";\\n           \").concat(getFinalCoord(rank, 'coords', this.op), \" = idx;\\n           val \").concat(this.op, \"= getX(\").concat(getCoords(rank, 'coords', this.op), \");\\n         }\\n         setOutputAtIndex(index, val);\\n       }\\n      }\\n    \");\n  }\n}\nfunction getCoords(rank, name, op) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".x, \").concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z, \").concat(name, \".w\");\n  } else {\n    throw Error(\"Cumulative \".concat(op, \" for rank \").concat(rank, \" is not yet supported\"));\n  }\n}\nfunction getFinalCoord(rank, name, op) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".w\");\n  } else {\n    throw Error(\"Cumulative \".concat(op, \" for rank \").concat(rank, \" is not yet supported\"));\n  }\n}","map":{"version":3,"names":["getMainHeaderString","main","computeDispatch","flatDispatchLayout","CumOpType","CumProgram","constructor","op","shape","exclusive","reverse","variableNames","uniforms","size","workgroupSize","outputShape","dispatchLayout","dispatch","shaderKey","concat","getUserCode","rank","length","initVal","Prod","val","getCoords","condition","idxString","getFinalCoord","name","Error"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\cum_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number];\n  // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n  uniforms = 'index : f32,';\n  size = true;\n  exclusive: boolean;\n  reverse: boolean;\n  op: CumOpType;\n\n  constructor(\n      op: CumOpType, shape: number[], exclusive: boolean, reverse: boolean) {\n    this.workgroupSize = [128, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal :\n                                 `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (this.reverse ? 'end + pow2' : 'end - pow2');\n    }\n    return `\n      ${main('index')} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${getFinalCoord(rank, 'coords', this.op)};\n         var val = ${val};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${condition}) {\n           let idx = ${idxString};\n           ${getFinalCoord(rank, 'coords', this.op)} = idx;\n           val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}