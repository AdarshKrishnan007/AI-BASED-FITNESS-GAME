{"ast":null,"code":"import axios from \"./api\";\nconst workoutService = {\n  // Existing methods\n  startLiveDetection: async exercise => {\n    const response = await fetch(`${API_BASE_URL}/start-live-detection`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        exercise\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Live detection failed\");\n    }\n    return response.json();\n  },\n  uploadVideoDetection: async (videoFile, exercise) => {\n    const formData = new FormData();\n    formData.append(\"video\", videoFile);\n    formData.append(\"exercise\", exercise);\n    const response = await fetch(`${API_BASE_URL}/upload-workout-video`, {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(\"Video upload failed\");\n    }\n    return response.json();\n  },\n  logWorkout: async ({\n    user_id,\n    exercise,\n    level,\n    score,\n    xp,\n    completed\n  }) => {\n    const response = await axios.post(\"/workout/log\", {\n      user_id,\n      exercise,\n      level,\n      score,\n      xp,\n      completed\n    });\n    return response.data;\n  },\n  // Add these two:\n  getTodayProgress: async () => {\n    const response = await axios.get(\"/workout/today\");\n    return response.data;\n  },\n  saveWorkoutResult: async ({\n    xp,\n    accuracy,\n    workoutType\n  }) => {\n    const response = await axios.post(\"/workout/save\", {\n      xp,\n      accuracy,\n      workoutType,\n      level\n    });\n    return response.data;\n  }\n};\nexport default workoutService;","map":{"version":3,"names":["axios","workoutService","startLiveDetection","exercise","response","fetch","API_BASE_URL","method","headers","body","JSON","stringify","ok","Error","json","uploadVideoDetection","videoFile","formData","FormData","append","logWorkout","user_id","level","score","xp","completed","post","data","getTodayProgress","get","saveWorkoutResult","accuracy","workoutType"],"sources":["D:/Fitness WebApp/client/src/services/workoutService.js"],"sourcesContent":["import axios from \"./api\";\r\n\r\nconst workoutService = {\r\n  // Existing methods\r\n  startLiveDetection: async (exercise) => {\r\n    const response = await fetch(`${API_BASE_URL}/start-live-detection`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ exercise }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Live detection failed\");\r\n    }\r\n    return response.json();\r\n  },\r\n\r\n  uploadVideoDetection: async (videoFile, exercise) => {\r\n    const formData = new FormData();\r\n    formData.append(\"video\", videoFile);\r\n    formData.append(\"exercise\", exercise);\r\n\r\n    const response = await fetch(`${API_BASE_URL}/upload-workout-video`, {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Video upload failed\");\r\n    }\r\n    return response.json();\r\n  },\r\n  logWorkout: async ({ user_id, exercise, level, score, xp, completed }) => {\r\n    const response = await axios.post(\"/workout/log\", {\r\n      user_id,\r\n      exercise,\r\n      level,\r\n      score,\r\n      xp,\r\n      completed,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Add these two:\r\n  getTodayProgress: async () => {\r\n    const response = await axios.get(\"/workout/today\");\r\n    return response.data;\r\n  },\r\n\r\n  saveWorkoutResult: async ({ xp, accuracy, workoutType }) => {\r\n    const response = await axios.post(\"/workout/save\", {\r\n      xp,\r\n      accuracy,\r\n      workoutType,\r\n      level,\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default workoutService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,GAAG;EACrB;EACAC,kBAAkB,EAAE,MAAOC,QAAQ,IAAK;IACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,YAAY,uBAAuB,EAAE;MACnEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAS,CAAC;IACnC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDC,oBAAoB,EAAE,MAAAA,CAAOC,SAAS,EAAEb,QAAQ,KAAK;IACnD,MAAMc,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,CAAC;IACnCC,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEhB,QAAQ,CAAC;IAErC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,YAAY,uBAAuB,EAAE;MACnEC,MAAM,EAAE,MAAM;MACdE,IAAI,EAAEQ;IACR,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;IACA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC;EACDM,UAAU,EAAE,MAAAA,CAAO;IAAEC,OAAO;IAAElB,QAAQ;IAAEmB,KAAK;IAAEC,KAAK;IAAEC,EAAE;IAAEC;EAAU,CAAC,KAAK;IACxE,MAAMrB,QAAQ,GAAG,MAAMJ,KAAK,CAAC0B,IAAI,CAAC,cAAc,EAAE;MAChDL,OAAO;MACPlB,QAAQ;MACRmB,KAAK;MACLC,KAAK;MACLC,EAAE;MACFC;IACF,CAAC,CAAC;IACF,OAAOrB,QAAQ,CAACuB,IAAI;EACtB,CAAC;EAED;EACAC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAMxB,QAAQ,GAAG,MAAMJ,KAAK,CAAC6B,GAAG,CAAC,gBAAgB,CAAC;IAClD,OAAOzB,QAAQ,CAACuB,IAAI;EACtB,CAAC;EAEDG,iBAAiB,EAAE,MAAAA,CAAO;IAAEN,EAAE;IAAEO,QAAQ;IAAEC;EAAY,CAAC,KAAK;IAC1D,MAAM5B,QAAQ,GAAG,MAAMJ,KAAK,CAAC0B,IAAI,CAAC,eAAe,EAAE;MACjDF,EAAE;MACFO,QAAQ;MACRC,WAAW;MACXV;IACF,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACuB,IAAI;EACtB;AACF,CAAC;AAED,eAAe1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}