{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthwiseConv2DProgram {\n  constructor(convInfo) {\n    let addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this.variableNames = ['x', 'W'];\n    this.uniforms = \"pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,\";\n    // This is an experimental value.\n    this.workgroupSize = [256, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = \"depthwise_\".concat(this.activation, \"_\").concat(this.isChannelsLast);\n  }\n  getUserCode() {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' : 'getX(batch, d1, xR, xC);';\n    const userCode = \"\\n      \".concat(activationFnSnippet(this.activation, this.hasPreluActivation, false, 4), \"\\n\\n      \").concat(main('index'), \" {\\n        if (index < uniforms.size) {\\n          let coords = getOutputCoords();\\n          let batch = coords[0];\\n          let xRCCorner = vec2<i32>(coords.\").concat(this.isChannelsLast ? 'yz' : 'zw', \") * uniforms.strides - uniforms.pads;\\n          let d2 = coords[\").concat(this.isChannelsLast ? 3 : 1, \"];\\n          let channelMul = uniforms.wShape[3];\\n          let d1 = d2 / channelMul;\\n          let q = d2 % channelMul;\\n\\n          let inputRowStart = xRCCorner.x;\\n          let inputColStart = xRCCorner.y;\\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\\n              uniforms.dilations[0];\\n          let inputColEnd = inputColStart + uniforms.filterWidth *\\n              uniforms.dilations[1];\\n\\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\\n          var value = 0.0;\\n\\n          // Extract if checking out of for loop for performance.\\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\\n            inputRowEnd < uniforms.inDims[0] &&\\n                inputColEnd < uniforms.inDims[1]) {\\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\\n                let xR = inputRowStart + wR * uniforms.dilations[0];\\n\\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\\n                  let xC = inputColStart + wC * uniforms.dilations[1];\\n\\n                  let xVal = \").concat(getXSnippet, \";\\n                  let wVal = getW(wR, wC, d1, q);\\n                  value = value + xVal * wVal;\\n                }\\n              }\\n            } else {\\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\\n                let xR = inputRowStart + wR * uniforms.dilations[0];\\n\\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\\n                  continue;\\n                }\\n\\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\\n                  let xC = inputColStart + wC * uniforms.dilations[1];\\n\\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\\n                    continue;\\n                  }\\n\\n                  let xVal = \").concat(getXSnippet, \";\\n                  let wVal = getW(wR, wC, d1, q);\\n                  value = value + xVal * wVal;\\n                }\\n              }\\n            }\\n            \").concat(biasActivationSnippet(this.addBias, this.activation), \"\\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\n        }\\n      }\\n    \");\n    return userCode;\n  }\n}","map":{"version":3,"names":["activationFnSnippet","biasActivationSnippet","getMainHeaderString","main","computeDispatch","flatDispatchLayout","DepthwiseConv2DProgram","constructor","convInfo","addBias","arguments","length","undefined","activation","hasPreluActivation","variableNames","uniforms","workgroupSize","size","outputShape","outShape","dispatchLayout","dispatch","isChannelsLast","dataFormat","push","shaderKey","concat","getUserCode","getXSnippet","userCode"],"sources":["D:\\Fitness WebApp\\tfjs-backend-webgpu\\src\\depthwise_conv2d_webgpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`;\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' :\n                                              'getX(batch, d1, xR, xC);';\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${\n        this.isChannelsLast ? 'yz' : 'zw'}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast ? 3 : 1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${biasActivationSnippet(this.addBias, this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQA,mBAAmB,EAAEC,qBAAqB,QAAO,mBAAmB;AAC5E,SAAQC,mBAAmB,IAAIC,IAAI,QAAsB,kBAAkB;AAC3E,SAAQC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAEjE,OAAM,MAAOC,sBAAsB;EAiBjCC,YACIC,QAAiC,EACqC;IAAA,IADnCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IAClDG,UAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsC,IAAI;IAAA,IAAEI,kBAAkB,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAd1E,KAAAK,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IAC1B,KAAAC,QAAQ,oIAC2D;IACnE;IACA,KAAAC,aAAa,GAA6B,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IAMrD,KAAAC,IAAI,GAAG,IAAI;IAKT,IAAI,CAACC,WAAW,GAAGX,QAAQ,CAACY,QAAQ;IACpC,IAAI,CAACC,cAAc,GAAGhB,kBAAkB,CAAC,IAAI,CAACc,WAAW,CAAC;IAC1D,IAAI,CAACG,QAAQ,GAAGlB,eAAe,CAC3B,IAAI,CAACiB,cAAc,EAAE,IAAI,CAACF,WAAW,EAAE,IAAI,CAACF,aAAa,CAAC;IAC9D,IAAI,CAACM,cAAc,GAAGf,QAAQ,CAACgB,UAAU,KAAK,cAAc;IAE5D,IAAIf,OAAO,EAAE;MACX,IAAI,CAACM,aAAa,CAACU,IAAI,CAAC,MAAM,CAAC;;IAEjC,IAAIX,kBAAkB,EAAE;MACtB,IAAI,CAACC,aAAa,CAACU,IAAI,CAAC,wBAAwB,CAAC;;IAGnD,IAAI,CAACjB,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACY,SAAS,gBAAAC,MAAA,CAAgB,IAAI,CAACd,UAAU,OAAAc,MAAA,CAAI,IAAI,CAACJ,cAAc,CAAE;EACxE;EAEAK,WAAWA,CAAA;IACT,MAAMC,WAAW,GAAG,IAAI,CAACN,cAAc,GAAG,0BAA0B,GAC1B,0BAA0B;IAEpE,MAAMO,QAAQ,cAAAH,MAAA,CACV3B,mBAAmB,CAAC,IAAI,CAACa,UAAU,EAAE,IAAI,CAACC,kBAAkB,EAAE,KAAK,EAAE,CAAC,CAAC,gBAAAa,MAAA,CAEvExB,IAAI,CAAC,OAAO,CAAC,wKAAAwB,MAAA,CAKb,IAAI,CAACJ,cAAc,GAAG,IAAI,GAAG,IAAI,uEAAAI,MAAA,CACb,IAAI,CAACJ,cAAc,GAAG,CAAC,GAAG,CAAC,6xCAAAI,MAAA,CA4BxBE,WAAW,4sBAAAF,MAAA,CAoBXE,WAAW,2KAAAF,MAAA,CAM5B1B,qBAAqB,CAAC,IAAI,CAACQ,OAAO,EAAE,IAAI,CAACI,UAAU,CAAC,gHAI7D;IACD,OAAOiB,QAAQ;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}